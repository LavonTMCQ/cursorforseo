{"version":3,"file":"26362c2d-1a72-4ffa-bd43-e866e680312f.mjs","sources":["../../../src/mastra/tools/content-analysis-tool.ts"],"sourcesContent":["import { createTool } from \"@mastra/core/tools\";\nimport { z } from \"zod\";\n\nexport const contentAnalysisTool = createTool({\n  id: \"content-analysis\",\n  description: \"Analyze content for SEO performance, keyword optimization, and readability\",\n  inputSchema: z.object({\n    content: z.string().describe(\"The content text to analyze\"),\n    targetKeyword: z.string().describe(\"Primary keyword to optimize for\"),\n    url: z.string().optional().describe(\"URL of the content (if analyzing existing page)\"),\n    metaTitle: z.string().optional().describe(\"Meta title of the page\"),\n    metaDescription: z.string().optional().describe(\"Meta description of the page\"),\n  }),\n  outputSchema: z.object({\n    seoScore: z.number().min(0).max(100).describe(\"Overall SEO score\"),\n    keywordAnalysis: z.object({\n      density: z.number().describe(\"Keyword density percentage\"),\n      frequency: z.number().describe(\"Number of keyword occurrences\"),\n      prominence: z.number().min(0).max(100).describe(\"Keyword prominence score\"),\n      variations: z.array(z.string()).describe(\"Keyword variations found\"),\n    }),\n    contentMetrics: z.object({\n      wordCount: z.number(),\n      readabilityScore: z.number().min(0).max(100),\n      headingStructure: z.object({\n        h1Count: z.number(),\n        h2Count: z.number(),\n        h3Count: z.number(),\n        hasProperStructure: z.boolean(),\n      }),\n      paragraphCount: z.number(),\n      averageParagraphLength: z.number(),\n    }),\n    metaAnalysis: z.object({\n      titleLength: z.number(),\n      titleOptimized: z.boolean(),\n      descriptionLength: z.number(),\n      descriptionOptimized: z.boolean(),\n      keywordInTitle: z.boolean(),\n      keywordInDescription: z.boolean(),\n    }),\n    recommendations: z.array(z.object({\n      type: z.enum([\"critical\", \"important\", \"suggestion\"]),\n      category: z.enum([\"keyword\", \"content\", \"meta\", \"structure\"]),\n      message: z.string(),\n      impact: z.enum([\"high\", \"medium\", \"low\"]),\n    })),\n    optimizationOpportunities: z.array(z.string()),\n  }),\n  execute: async ({ context }) => {\n    const { content, targetKeyword, url, metaTitle, metaDescription } = context;\n\n    // Analyze content\n    const analysis = await analyzeContent(content, targetKeyword, metaTitle, metaDescription);\n\n    return analysis;\n  },\n});\n\nasync function analyzeContent(\n  content: string,\n  targetKeyword: string,\n  metaTitle?: string,\n  metaDescription?: string\n) {\n  const words = content.toLowerCase().split(/\\s+/);\n  const wordCount = words.length;\n  const keywordLower = targetKeyword.toLowerCase();\n  \n  // Keyword analysis\n  const keywordOccurrences = words.filter(word => \n    word.includes(keywordLower) || keywordLower.includes(word)\n  ).length;\n  const keywordDensity = (keywordOccurrences / wordCount) * 100;\n  \n  // Content structure analysis\n  const h1Matches = content.match(/<h1[^>]*>.*?<\\/h1>/gi) || [];\n  const h2Matches = content.match(/<h2[^>]*>.*?<\\/h2>/gi) || [];\n  const h3Matches = content.match(/<h3[^>]*>.*?<\\/h3>/gi) || [];\n  const paragraphs = content.split(/\\n\\s*\\n/).filter(p => p.trim().length > 0);\n  \n  // Meta analysis\n  const titleLength = metaTitle?.length || 0;\n  const descriptionLength = metaDescription?.length || 0;\n  const keywordInTitle = metaTitle?.toLowerCase().includes(keywordLower) || false;\n  const keywordInDescription = metaDescription?.toLowerCase().includes(keywordLower) || false;\n  \n  // Calculate SEO score\n  let seoScore = 0;\n  \n  // Keyword optimization (30 points)\n  if (keywordDensity >= 1 && keywordDensity <= 3) seoScore += 15;\n  else if (keywordDensity > 0) seoScore += 8;\n  \n  if (keywordInTitle) seoScore += 10;\n  if (keywordInDescription) seoScore += 5;\n  \n  // Content quality (40 points)\n  if (wordCount >= 300) seoScore += 10;\n  if (wordCount >= 1000) seoScore += 5;\n  if (h1Matches.length === 1) seoScore += 10;\n  if (h2Matches.length >= 2) seoScore += 10;\n  if (paragraphs.length >= 3) seoScore += 5;\n  \n  // Meta optimization (30 points)\n  if (titleLength >= 30 && titleLength <= 60) seoScore += 15;\n  else if (titleLength > 0) seoScore += 8;\n  \n  if (descriptionLength >= 120 && descriptionLength <= 160) seoScore += 15;\n  else if (descriptionLength > 0) seoScore += 8;\n  \n  // Generate recommendations\n  const recommendations = [];\n  \n  if (keywordDensity < 1) {\n    recommendations.push({\n      type: \"important\" as const,\n      category: \"keyword\" as const,\n      message: `Increase keyword density. Current: ${keywordDensity.toFixed(2)}%, recommended: 1-3%`,\n      impact: \"high\" as const,\n    });\n  }\n  \n  if (keywordDensity > 3) {\n    recommendations.push({\n      type: \"critical\" as const,\n      category: \"keyword\" as const,\n      message: `Reduce keyword density to avoid over-optimization. Current: ${keywordDensity.toFixed(2)}%`,\n      impact: \"high\" as const,\n    });\n  }\n  \n  if (!keywordInTitle) {\n    recommendations.push({\n      type: \"critical\" as const,\n      category: \"meta\" as const,\n      message: \"Include target keyword in meta title\",\n      impact: \"high\" as const,\n    });\n  }\n  \n  if (wordCount < 300) {\n    recommendations.push({\n      type: \"important\" as const,\n      category: \"content\" as const,\n      message: `Increase content length. Current: ${wordCount} words, recommended: 300+ words`,\n      impact: \"medium\" as const,\n    });\n  }\n  \n  if (h1Matches.length !== 1) {\n    recommendations.push({\n      type: \"important\" as const,\n      category: \"structure\" as const,\n      message: `Use exactly one H1 tag. Current: ${h1Matches.length}`,\n      impact: \"medium\" as const,\n    });\n  }\n\n  return {\n    seoScore: Math.min(100, seoScore),\n    keywordAnalysis: {\n      density: Math.round(keywordDensity * 100) / 100,\n      frequency: keywordOccurrences,\n      prominence: keywordInTitle ? 90 : (keywordOccurrences > 0 ? 60 : 0),\n      variations: [targetKeyword, `${targetKeyword}s`, `${targetKeyword} guide`],\n    },\n    contentMetrics: {\n      wordCount,\n      readabilityScore: Math.max(0, 100 - (wordCount / 50)), // Simplified readability\n      headingStructure: {\n        h1Count: h1Matches.length,\n        h2Count: h2Matches.length,\n        h3Count: h3Matches.length,\n        hasProperStructure: h1Matches.length === 1 && h2Matches.length >= 2,\n      },\n      paragraphCount: paragraphs.length,\n      averageParagraphLength: paragraphs.length > 0 ? wordCount / paragraphs.length : 0,\n    },\n    metaAnalysis: {\n      titleLength,\n      titleOptimized: titleLength >= 30 && titleLength <= 60 && keywordInTitle,\n      descriptionLength,\n      descriptionOptimized: descriptionLength >= 120 && descriptionLength <= 160 && keywordInDescription,\n      keywordInTitle,\n      keywordInDescription,\n    },\n    recommendations,\n    optimizationOpportunities: [\n      \"Add internal links to related content\",\n      \"Include relevant images with alt text\",\n      \"Optimize for featured snippets\",\n      \"Add schema markup for better rich results\",\n    ],\n  };\n}\n"],"names":[],"mappings":"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"}