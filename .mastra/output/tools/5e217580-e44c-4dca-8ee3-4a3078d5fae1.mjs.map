{"version":3,"file":"5e217580-e44c-4dca-8ee3-4a3078d5fae1.mjs","sources":["../../../lib/prisma.ts","../../../src/mastra/tools/project-data-tool.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient({\n  log: ['error', 'warn'],\n})\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n","import { createTool } from \"@mastra/core/tools\";\nimport { z } from \"zod\";\nimport { prisma } from \"../../../lib/prisma\";\n\nexport const projectDataTool = createTool({\n  id: \"project-data\",\n  description: \"Access and analyze existing SEO project data from the database\",\n  inputSchema: z.object({\n    action: z.enum([\"get_projects\", \"get_project\", \"get_keywords\", \"get_rankings\", \"get_audits\"]),\n    projectId: z.string().optional().describe(\"Project ID for specific project queries\"),\n    userId: z.string().optional().describe(\"User ID to filter projects\"),\n    limit: z.number().default(10).describe(\"Limit number of results\"),\n  }),\n  outputSchema: z.object({\n    success: z.boolean(),\n    data: z.any().describe(\"Requested data based on action\"),\n    summary: z.object({\n      totalProjects: z.number().optional(),\n      totalKeywords: z.number().optional(),\n      averageRanking: z.number().optional(),\n      lastAuditDate: z.string().optional(),\n    }).optional(),\n    insights: z.array(z.string()).optional().describe(\"AI-generated insights from the data\"),\n  }),\n  execute: async ({ context }) => {\n    const { action, projectId, userId, limit } = context;\n\n    try {\n      let data: any;\n      let summary: any = {};\n      let insights: string[] = [];\n\n      switch (action) {\n        case \"get_projects\":\n          data = await prisma.project.findMany({\n            where: userId ? { userId } : undefined,\n            take: limit,\n            include: {\n              keywords: {\n                take: 5,\n                include: {\n                  rankings: {\n                    take: 1,\n                    orderBy: { date: \"desc\" },\n                  },\n                },\n              },\n              audits: {\n                take: 1,\n                orderBy: { createdAt: \"desc\" },\n              },\n            },\n          });\n\n          summary.totalProjects = data.length;\n          insights = generateProjectInsights(data);\n          break;\n\n        case \"get_project\":\n          if (!projectId) {\n            throw new Error(\"Project ID is required for get_project action\");\n          }\n\n          data = await prisma.project.findUnique({\n            where: { id: projectId },\n            include: {\n              keywords: {\n                include: {\n                  rankings: {\n                    orderBy: { date: \"desc\" },\n                    take: 10,\n                  },\n                },\n              },\n              audits: {\n                orderBy: { createdAt: \"desc\" },\n                take: 5,\n              },\n              user: {\n                select: { name: true, email: true },\n              },\n            },\n          });\n\n          if (data) {\n            summary.totalKeywords = data.keywords.length;\n            summary.averageRanking = calculateAverageRanking(data.keywords);\n            summary.lastAuditDate = data.audits[0]?.createdAt.toISOString();\n            insights = generateSingleProjectInsights(data);\n          }\n          break;\n\n        case \"get_keywords\":\n          const whereClause = projectId ? { projectId } : {};\n          data = await prisma.keyword.findMany({\n            where: whereClause,\n            take: limit,\n            include: {\n              rankings: {\n                orderBy: { date: \"desc\" },\n                take: 5,\n              },\n              project: {\n                select: { name: true, domain: true },\n              },\n            },\n          });\n\n          summary.totalKeywords = data.length;\n          summary.averageRanking = calculateAverageRanking(data);\n          insights = generateKeywordInsights(data);\n          break;\n\n        case \"get_rankings\":\n          const keywordFilter = projectId \n            ? { keyword: { projectId } }\n            : {};\n\n          data = await prisma.ranking.findMany({\n            where: keywordFilter,\n            take: limit,\n            orderBy: { date: \"desc\" },\n            include: {\n              keyword: {\n                include: {\n                  project: {\n                    select: { name: true, domain: true },\n                  },\n                },\n              },\n            },\n          });\n\n          summary.averageRanking = data.length > 0 \n            ? data.reduce((sum, r) => sum + r.position, 0) / data.length \n            : 0;\n          insights = generateRankingInsights(data);\n          break;\n\n        case \"get_audits\":\n          const auditFilter = projectId ? { projectId } : {};\n          data = await prisma.siteAudit.findMany({\n            where: auditFilter,\n            take: limit,\n            orderBy: { createdAt: \"desc\" },\n            include: {\n              project: {\n                select: { name: true, domain: true },\n              },\n            },\n          });\n\n          summary.lastAuditDate = data[0]?.createdAt.toISOString();\n          insights = generateAuditInsights(data);\n          break;\n\n        default:\n          throw new Error(`Unknown action: ${action}`);\n      }\n\n      return {\n        success: true,\n        data,\n        summary,\n        insights,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        data: null,\n        summary: undefined,\n        insights: [`Error accessing project data: ${error.message}`],\n      };\n    }\n  },\n});\n\nfunction calculateAverageRanking(keywords: any[]): number {\n  if (!keywords.length) return 0;\n  \n  const totalRankings = keywords.reduce((sum, keyword) => {\n    const latestRanking = keyword.rankings?.[0]?.position || 0;\n    return sum + latestRanking;\n  }, 0);\n  \n  return Math.round(totalRankings / keywords.length);\n}\n\nfunction generateProjectInsights(projects: any[]): string[] {\n  const insights = [];\n  \n  if (projects.length === 0) {\n    insights.push(\"No projects found. Consider creating your first SEO project to start tracking keywords and rankings.\");\n    return insights;\n  }\n\n  const totalKeywords = projects.reduce((sum, p) => sum + (p.keywords?.length || 0), 0);\n  const avgKeywordsPerProject = Math.round(totalKeywords / projects.length);\n  \n  insights.push(`You have ${projects.length} active SEO projects with an average of ${avgKeywordsPerProject} keywords per project.`);\n  \n  const projectsWithRecentAudits = projects.filter(p => p.audits?.length > 0).length;\n  if (projectsWithRecentAudits < projects.length) {\n    insights.push(`${projects.length - projectsWithRecentAudits} projects need fresh SEO audits to identify optimization opportunities.`);\n  }\n\n  return insights;\n}\n\nfunction generateSingleProjectInsights(project: any): string[] {\n  const insights = [];\n  \n  if (!project) {\n    insights.push(\"Project not found.\");\n    return insights;\n  }\n\n  insights.push(`Project \"${project.name}\" for domain ${project.domain} is tracking ${project.keywords.length} keywords.`);\n  \n  if (project.keywords.length > 0) {\n    const rankedKeywords = project.keywords.filter(k => k.rankings?.length > 0);\n    const avgPosition = calculateAverageRanking(project.keywords);\n    \n    insights.push(`Average ranking position: ${avgPosition}. ${rankedKeywords.length} keywords have ranking data.`);\n    \n    const topRankingKeywords = project.keywords\n      .filter(k => k.rankings?.[0]?.position <= 10)\n      .length;\n    \n    if (topRankingKeywords > 0) {\n      insights.push(`${topRankingKeywords} keywords are ranking in the top 10 positions.`);\n    }\n  }\n\n  if (project.audits.length > 0) {\n    const latestAudit = project.audits[0];\n    insights.push(`Latest audit completed on ${new Date(latestAudit.createdAt).toLocaleDateString()} with a score of ${latestAudit.score}/100.`);\n  } else {\n    insights.push(\"No audits found. Consider running a comprehensive SEO audit to identify optimization opportunities.\");\n  }\n\n  return insights;\n}\n\nfunction generateKeywordInsights(keywords: any[]): string[] {\n  const insights = [];\n  \n  if (keywords.length === 0) {\n    insights.push(\"No keywords found. Start by adding target keywords to track their performance.\");\n    return insights;\n  }\n\n  const keywordsWithRankings = keywords.filter(k => k.rankings?.length > 0);\n  insights.push(`${keywordsWithRankings.length} out of ${keywords.length} keywords have ranking data.`);\n  \n  if (keywordsWithRankings.length > 0) {\n    const topPerformers = keywordsWithRankings.filter(k => k.rankings[0]?.position <= 10);\n    insights.push(`${topPerformers.length} keywords are performing well (top 10 positions).`);\n    \n    const needsImprovement = keywordsWithRankings.filter(k => k.rankings[0]?.position > 50);\n    if (needsImprovement.length > 0) {\n      insights.push(`${needsImprovement.length} keywords need optimization (ranking below position 50).`);\n    }\n  }\n\n  return insights;\n}\n\nfunction generateRankingInsights(rankings: any[]): string[] {\n  const insights = [];\n  \n  if (rankings.length === 0) {\n    insights.push(\"No ranking data available.\");\n    return insights;\n  }\n\n  const avgPosition = rankings.reduce((sum, r) => sum + r.position, 0) / rankings.length;\n  insights.push(`Average ranking position across all tracked keywords: ${Math.round(avgPosition)}.`);\n  \n  const topRankings = rankings.filter(r => r.position <= 10).length;\n  const goodRankings = rankings.filter(r => r.position <= 20).length;\n  \n  insights.push(`${topRankings} rankings in top 10, ${goodRankings} in top 20.`);\n  \n  return insights;\n}\n\nfunction generateAuditInsights(audits: any[]): string[] {\n  const insights = [];\n  \n  if (audits.length === 0) {\n    insights.push(\"No audit data available. Consider running SEO audits to identify optimization opportunities.\");\n    return insights;\n  }\n\n  const avgScore = audits.reduce((sum, a) => sum + a.score, 0) / audits.length;\n  insights.push(`Average SEO audit score: ${Math.round(avgScore)}/100.`);\n  \n  const recentAudits = audits.filter(a => {\n    const auditDate = new Date(a.createdAt);\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    return auditDate > thirtyDaysAgo;\n  });\n  \n  insights.push(`${recentAudits.length} audits completed in the last 30 days.`);\n  \n  return insights;\n}\n"],"names":[],"mappings":"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"}