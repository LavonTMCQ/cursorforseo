{"version":3,"file":"5e52a628-c48a-4a95-9c7b-c13f1f084d31.mjs","sources":["../../../src/mastra/tools/keyword-research-tool.ts"],"sourcesContent":["import { createTool } from \"@mastra/core/tools\";\nimport { z } from \"zod\";\n\nexport const keywordResearchTool = createTool({\n  id: \"keyword-research\",\n  description: \"Research keywords, analyze search volumes, and assess keyword difficulty for SEO optimization\",\n  inputSchema: z.object({\n    seedKeyword: z.string().describe(\"The main keyword or topic to research\"),\n    domain: z.string().optional().describe(\"Target domain for context\"),\n    location: z.string().default(\"US\").describe(\"Geographic location for search data\"),\n    language: z.string().default(\"en\").describe(\"Language for keyword research\"),\n    includeRelated: z.boolean().default(true).describe(\"Include related keyword suggestions\"),\n  }),\n  outputSchema: z.object({\n    primaryKeyword: z.object({\n      keyword: z.string(),\n      searchVolume: z.number().nullable(),\n      difficulty: z.enum([\"easy\", \"medium\", \"hard\"]),\n      cpc: z.number().nullable(),\n      competition: z.string(),\n    }),\n    relatedKeywords: z.array(z.object({\n      keyword: z.string(),\n      searchVolume: z.number().nullable(),\n      difficulty: z.enum([\"easy\", \"medium\", \"hard\"]),\n      relevance: z.number().min(0).max(100),\n    })),\n    longTailSuggestions: z.array(z.string()),\n    searchIntent: z.enum([\"informational\", \"commercial\", \"transactional\", \"navigational\"]),\n    recommendations: z.array(z.string()),\n  }),\n  execute: async ({ context }) => {\n    const { seedKeyword, domain, location, language, includeRelated } = context;\n\n    // Simulate keyword research (in production, this would call DataForSEO API or similar)\n    const mockKeywordData = await simulateKeywordResearch(seedKeyword, domain, location);\n\n    return {\n      primaryKeyword: {\n        keyword: seedKeyword,\n        searchVolume: mockKeywordData.searchVolume,\n        difficulty: mockKeywordData.difficulty,\n        cpc: mockKeywordData.cpc,\n        competition: mockKeywordData.competition,\n      },\n      relatedKeywords: mockKeywordData.relatedKeywords,\n      longTailSuggestions: mockKeywordData.longTailSuggestions,\n      searchIntent: mockKeywordData.searchIntent,\n      recommendations: mockKeywordData.recommendations,\n    };\n  },\n});\n\n// Mock function to simulate keyword research\nasync function simulateKeywordResearch(seedKeyword: string, domain?: string, location: string = \"US\") {\n  // This would be replaced with actual API calls to DataForSEO, SEMrush, etc.\n  const baseVolume = Math.floor(Math.random() * 10000) + 100;\n  \n  return {\n    searchVolume: baseVolume,\n    difficulty: [\"easy\", \"medium\", \"hard\"][Math.floor(Math.random() * 3)] as \"easy\" | \"medium\" | \"hard\",\n    cpc: Math.round((Math.random() * 5 + 0.1) * 100) / 100,\n    competition: [\"low\", \"medium\", \"high\"][Math.floor(Math.random() * 3)],\n    relatedKeywords: [\n      {\n        keyword: `${seedKeyword} guide`,\n        searchVolume: Math.floor(baseVolume * 0.3),\n        difficulty: \"easy\" as const,\n        relevance: 85,\n      },\n      {\n        keyword: `best ${seedKeyword}`,\n        searchVolume: Math.floor(baseVolume * 0.5),\n        difficulty: \"medium\" as const,\n        relevance: 90,\n      },\n      {\n        keyword: `${seedKeyword} tips`,\n        searchVolume: Math.floor(baseVolume * 0.2),\n        difficulty: \"easy\" as const,\n        relevance: 80,\n      },\n    ],\n    longTailSuggestions: [\n      `how to ${seedKeyword}`,\n      `${seedKeyword} for beginners`,\n      `${seedKeyword} best practices`,\n      `${seedKeyword} tools and techniques`,\n    ],\n    searchIntent: [\"informational\", \"commercial\", \"transactional\", \"navigational\"][Math.floor(Math.random() * 4)] as any,\n    recommendations: [\n      `Target \"${seedKeyword}\" as a primary keyword with medium competition`,\n      `Create comprehensive content covering related topics`,\n      `Focus on long-tail variations for easier ranking`,\n      `Consider local SEO if targeting specific geographic areas`,\n    ],\n  };\n}\n"],"names":[],"mappings":"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"}